# -*- coding: utf-8 -*-
"""task 2 tic-tac-toe AI

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1djhuiBpQXw3jA3swB7jrXnZ-9nSz1Soe
"""

!pip install gradio

import gradio as gr

board = [" "] * 9
turn = ["X"]
game_over = [False]

def check_win(b, player):
    win_pos = [(0,1,2), (3,4,5), (6,7,8),
               (0,3,6), (1,4,7), (2,5,8),
               (0,4,8), (2,4,6)]
    return any(b[i]==b[j]==b[k]==player for i,j,k in win_pos)

def check_draw(b):
    return all(cell != " " for cell in b)

def minimax(b, is_max):
    if check_win(b, "O"): return 1
    if check_win(b, "X"): return -1
    if check_draw(b): return 0

    best = -100 if is_max else 100
    for i in range(9):
        if b[i] == " ":
            b[i] = "O" if is_max else "X"
            score = minimax(b, not is_max)
            b[i] = " "
            best = max(best, score) if is_max else min(best, score)
    return best

def computer_move():
    best_score = -100
    move = -1
    for i in range(9):
        if board[i] == " ":
            board[i] = "O"
            score = minimax(board, False)
            board[i] = " "
            if score > best_score:
                best_score = score
                move = i
    return move

def click(i):
    if game_over[0] or board[i] != " ":
        return [gr.update() for _ in range(9)] + ["Invalid move or game over!"]

    board[i] = turn[0]
    status = f"Turn: O" if turn[0] == "X" else "Turn: X"

    if check_win(board, turn[0]):
        game_over[0] = True
        status = f"{turn[0]} wins!"
    elif check_draw(board):
        game_over[0] = True
        status = "Draw!"
    else:
        if turn[0] == "X":
            turn[0] = "O"
            move = computer_move()
            if move != -1:
                board[move] = "O"
                if check_win(board, "O"):
                    status = "O wins!"
                    game_over[0] = True
                elif check_draw(board):
                    status = "Draw!"
                    game_over[0] = True
                else:
                    turn[0] = "X"

    button_updates = [gr.update(value=board[j]) for j in range(9)]
    return button_updates + [status]

def reset_game():
    for i in range(9):
        board[i] = " "
    turn[0] = "X"
    game_over[0] = False
    return [gr.update(value=" ") for _ in range(9)] + ["Turn: X"]

with gr.Blocks() as demo:
    gr.Markdown("## ðŸŽ® Tic Tac Toe (Sharon)")

    buttons = []
    with gr.Row():
        for i in range(3):
            with gr.Column():
                for j in range(3):
                    idx = i * 3 + j
                    btn = gr.Button(" ", elem_id=str(idx))
                    buttons.append(btn)

    status = gr.Textbox("Turn: X", interactive=False)

    for i, btn in enumerate(buttons):
        btn.click(fn=lambda idx=i: click(idx), outputs=buttons + [status])

    gr.Button("ðŸ”„ Reset Game").click(fn=reset_game, outputs=buttons + [status])

demo.launch()