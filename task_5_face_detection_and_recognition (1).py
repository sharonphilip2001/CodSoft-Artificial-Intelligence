# -*- coding: utf-8 -*-
"""task_5_face_detection_and_recognition

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1m8aB8VfHxm4iVVApLh7Ah0ot2xTnRH3P
"""

import cv2
from google.colab.patches import cv2_imshow

def detect_faces(img_path):
    # Load the cascade
    cascade_path = cv2.data.haarcascades + 'haarcascade_frontalface_default.xml'
    face_cascade = cv2.CascadeClassifier(cascade_path)

    if face_cascade.empty():
        print("Failed to load cascade classifier!")
        return

    # Read the input image
    img = cv2.imread(img_path)

    if img is None:
        print("Failed to read image!")
        return

    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

    # Detect faces
    faces = face_cascade.detectMultiScale(gray, 1.1, 4)

    # Draw rectangle around the faces
    for (x, y, w, h) in faces:
        cv2.rectangle(img, (x, y), (x+w, y+h), (255, 0, 0), 2)

    # Display the output in Google Colab
    cv2_imshow(img)

# Test
detect_faces('/content/baba kalyani.jpg')

!pip install gradio

import cv2
import numpy as np
import gradio as gr
from PIL import Image
from google.colab import files  # For Colab file uploads

# Load Haar Cascade for face detection
face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')
known_image_path = "/content/baba kalyani.jpg"

# Try loading the known image, or prompt for upload if not found
try:
    known_image = cv2.imread(known_image_path)
    if known_image is None:
        print(f"Image '{known_image_path}' not found. Please upload the known image.")
        uploaded = files.upload()
        for filename in uploaded:
            known_image = cv2.imread(filename)
            known_image_path = filename
            break
except Exception as e:
    raise Exception(f"Error loading known image: {e}")

# Ensure the known image loaded correctly
if known_image is None:
    raise Exception("Could not load known image even after uploading.")

# Convert to grayscale and detect the known face
known_gray = cv2.cvtColor(known_image, cv2.COLOR_BGR2GRAY)
known_faces = face_cascade.detectMultiScale(known_gray, 1.1, 4)

if len(known_faces) == 0:
    raise Exception("No face detected in the known image.")

# Crop the first detected face for comparison
x, y, w, h = known_faces[0]
known_face_crop = known_gray[y:y+h, x:x+w]

# Function to recognize face from input image
def recognize_face(input_img):
    img = np.array(input_img)
    gray = cv2.cvtColor(img, cv2.COLOR_RGB2GRAY)
    faces = face_cascade.detectMultiScale(gray, 1.1, 4)

    if len(faces) == 0:
        return "No face detected.", Image.fromarray(img)

    match_found = False
    message = "No match found among detected faces."

    for (x, y, w, h) in faces:
        test_face = gray[y:y+h, x:x+w]

        if test_face.shape[0] == 0 or test_face.shape[1] == 0:
            color = (0, 0, 255)
            message = "Detected face is too small to compare."
        else:
            # Resize the test face to match known face dimensions
            test_face_resized = cv2.resize(test_face, (known_face_crop.shape[1], known_face_crop.shape[0]))
            diff = cv2.absdiff(known_face_crop, test_face_resized)
            score = np.mean(diff)

            # Decide based on score threshold
            if score < 50:
                match_found = True
                color = (0, 255, 0)
                message = "Known person detected!"
            else:
                color = (0, 0, 255)
                message = "This is NOT the known person."

        # Draw rectangle and overlay message
        cv2.rectangle(img, (x, y), (x + w, y + h), color, 2)
        cv2.putText(img, message, (x, y - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.8, color, 2)

    return message, Image.fromarray(img)

# Gradio interface setup
demo = gr.Interface(
    fn=recognize_face,
    inputs=gr.Image(type="pil", label="Upload Image to Check"),
    outputs=[gr.Textbox(label="Result"), gr.Image(label="Detected Face")],
    title="Face Recognition App (Sharon Philip)",
    description="Upload an image to see if it matches the known person using classical Computer Vision (Haar + pixel comparison)."
)

demo.launch()